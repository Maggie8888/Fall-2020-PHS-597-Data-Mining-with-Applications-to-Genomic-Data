# -*- coding: utf-8 -*-
"""HW2_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tqr-3G0tu0rzu20sVkhh7OfEIxt3_jBs
"""

import numpy as np
import pandas as pd
from sklearn.cross_decomposition import PLSRegression
from sklearn import preprocessing
from numpy.linalg import inv

np.random.seed(123456789)
n = 1000
q = 1
p = 10
X = np.random.normal(size=n * p).reshape((n, p))
B = np.array([[1, 2] + [0] * (p - 2)] * q).T
Y = np.dot(X, B) + np.random.normal(size=n * q).reshape((n, q)) + 5
scaler = preprocessing.StandardScaler()
x = scaler.fit_transform(X)
y =scaler.fit_transform(Y)

def pls(x,y,A):
 b=np.zeros((np.size(x,1),A))
 V=np.dot(np.transpose(x),y)
 XX=np.dot(x,V)
 b[:,[0]]=np.dot(V,(np.dot(np.dot(np.linalg.pinv(np.dot(np.transpose(XX),XX)),np.transpose(XX)),y)))
 for a in range(1,A):
   V=np.column_stack((b,np.dot(np.transpose(x),np.dot(x,b[:,[a-1]]))))
   inv=np.linalg.pinv(np.dot(np.transpose(np.dot(x,V)),np.dot(x,V)))
   b[:,[a]]=np.dot(V,(np.dot(inv,np.dot(np.transpose(np.dot(x,V)),y))))
 return b

res=pls(x,y,10)
print(res[:,[9]])

pls2 = PLSRegression(n_components=10)
fit2= pls2.fit(x, y)
#print "Estimated B"
print(fit2.coef_)